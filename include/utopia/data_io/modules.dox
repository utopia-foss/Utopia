/**

\defgroup DataIO DataIO
\{
\brief Writing data files and reporting data to the Python frontend

\}


\defgroup ConfigUtilities Config Utilities
\{
\ingroup DataIO
\brief Allows reading configuration entries from YAML files

Utopia relies heavily on the use of YAML configuration files.
These files are available as so called "config nodes", ::Utopia::DataIO::Config objects, which are hierarchically nested maps, sequences, and scalars.

When retrieving values from these nodes, a type cast becomes necessary. While the library used for YAML reading provides such a function, we found it more convenient to define some thin wrappers around them, which supply more information when something goes wrong.

### The ::Utopia::get_as function

The ::Utopia::get_as function supplies a general way to access the content of a YAML node.

Example:
\code{.cc}
    using namespace Utopia;
    auto cfg = YAML::Load("{my_double: 3.14, my_int: 42, my_str: foo}");

    auto my_double = get_as<double>("my_double", cfg);
    auto my_int = get_as<int>("my_int", cfg);
    auto my_uint = get_as<unsigned int>("my_int", cfg);
    auto my_str = get_as<std::string>("my_str", cfg);
\endcode

To remember the order of arguments, this sentence can be employed: ``get_as`` a ``double``: the entry named ``my_double`` from this ``cfg`` node.
Of course, YAML has no types associated with each entry; the ::Utopia::get_as function *tries* to do this conversion and, if it fails, throws an exception.

While ``cfg["key"]`` can be used to traverse the YAML tree, cases where the given key is not available lead to so-called Zombie nodes. The ::Utopia::get_as function is capable of raising the appropriate error message, a ::Utopia::KeyError, for such cases, because the key and the node from which to read the key are passed separately.

\}

*/
