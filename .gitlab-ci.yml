---
image: citcat/dune-env:latest

variables:
  PROCNUM: 2
  DUNE_CONTROL_PATH: /opt/dune:$CI_PROJECT_DIR  # such that DUNE finds Utopia
  RUN_IN_DUNE_ENV: $CI_PROJECT_DIR/build-cmake/run-in-dune-env
  CONFIG_FLAGS:
      -DDUNE_PYTHON_VIRTUALENV_SETUP=True
      -DDUNE_PYTHON_ALLOW_GET_PIP=True
  MAKE_FLAGS_BUILD:
      -j $PROCNUM
  MODEL_DIR: $CI_PROJECT_DIR/dune/utopia/models

stages:
  - build
  - test

before_script:
  ## Enter dune directory
  - cd /opt/dune
  ##
  ## For outside dependencies, use the "Utopia CI" deploy key
  ## Instructions:
  ##   https://docs.gitlab.com/ce/ci/ssh_keys/
  ## Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)
  ##
  ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
  ## We're using tr to fix line endings which makes ed25519 keys work
  ## without extra base64 encoding.
  ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  ##
  ## Create the SSH directory and give it the right permissions
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  ## 
  ## Add the known hosts lists to ensure this ssh connection is the right one
  - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  # - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config' # FIXME

# Build stage -----------------------------------------------------------------
build:main:
  stage: build
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - $CI_PROJECT_DIR/build-cmake
    expire_in: 3 hours
  tags:
    - light
  script:
    - CMAKE_FLAGS="$CONFIG_FLAGS"
      ./dune-common/bin/dunecontrol --module=utopia configure
    - ./dune-common/bin/dunecontrol --only=utopia make doc
    - ./dune-common/bin/dunecontrol --only=utopia make $MAKE_FLAGS_BUILD build_tests
    - ./dune-common/bin/dunecontrol --only=utopia make $MAKE_FLAGS_BUILD all

build:debug:
  stage: build
  allow_failure: true
  tags:
    - light
  script:
    - CMAKE_FLAGS="-DCMAKE_BUILD_TYPE=Debug $CONFIG_FLAGS -DCMAKE_CXX_FLAGS_DEBUG='$CMAKE_CXX_FLAGS_DEBUG -Werror'"
      ./dune-common/bin/dunecontrol --only=utopia configure
    - ./dune-common/bin/dunecontrol --only=utopia make $MAKE_FLAGS_BUILD build_tests
    - ./dune-common/bin/dunecontrol --only=utopia make $MAKE_FLAGS_BUILD all

build:models:
  stage: build
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - $CI_PROJECT_DIR/build-cmake
    expire_in: 3 hours
  tags:
    - light
  script:
    - CMAKE_FLAGS="$CONFIG_FLAGS"
      ./dune-common/bin/dunecontrol --module=utopia configure
    - ./dune-common/bin/dunecontrol --only=utopia make $MAKE_FLAGS_BUILD all

build:update-dune:
  stage: build
  allow_failure: true
  tags:
    - light
  script:
    - ./dune-common/bin/dunecontrol update
    - CMAKE_FLAGS="$CONFIG_FLAGS" MAKE_FLAGS="$MAKE_FLAGS_BUILD"
      ./dune-common/bin/dunecontrol --module=utopia all
    - ./dune-common/bin/dunecontrol --only=utopia make $MAKE_FLAGS_BUILD build_tests


# Test stage ------------------------------------------------------------------
test:core:
  stage: test
  dependencies:
    - build:main
  tags:
    - light
  script:
    - ./dune-common/bin/dunecontrol --only=utopia make test_core

test:dataio:
  stage: test
  dependencies:
    - build:main
  tags:
    - light
  script:
    - ./dune-common/bin/dunecontrol --only=utopia make test_dataio

test:python:
  stage: test
  dependencies:
    - build:main
  tags:
    - light
  script:
    - ./dune-common/bin/dunecontrol --only=utopia configure
    - ./dune-common/bin/dunecontrol --only=utopia make test_python

test:models:
  stage: test
  dependencies:
    - build:models
  tags:
    - light
  script:
    - ./dune-common/bin/dunecontrol --only=utopia configure
    # test the default model config
    - $RUN_IN_DUNE_ENV utopia dummy
    # test a configuration that allows a sweep
    - $RUN_IN_DUNE_ENV utopia dummy $MODEL_DIR/dummy/test/dummy_cfg.yml --sweep --note sweep
    # test the other models
    - $RUN_IN_DUNE_ENV utopia SimpleEG $MODEL_DIR/SimpleEG/test/SimpleEG_cfg.yml --sweep --note sweep
