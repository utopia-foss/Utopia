# -- Continuous Integration and Deployment of Utopia --------------------------
#
# This CI does the following:
#   - Automatically create a docker image for testing
#   - Build Utopia using gcc and clang
#   - Test Utopia (using the results of the gcc build)
---
# ++ Pipeline preparations ++++++++++++++++++++++++++++++++++++++++++++++++++++
variables:
  # Load submodules and submodules of submodules by default
  GIT_SUBMODULE_STRATEGY: recursive

  # Variables needed for docker image deployment
  # The different segments of the resulting test image tag
  BASE_IMAGE_NAME: ccees/utopia-base
  BASE_IMAGE_VERSION: "1.0"
  BASE_IMAGE: "${BASE_IMAGE_NAME}:v${BASE_IMAGE_VERSION}"
  # NOTE Do not forget to increment the BASE_IMAGE_VERSION when changes to the
  #      docker file are introduced.

  # For __deployment__, the Utopia version
  UTOPIA_VERSION: "0.99999"
  # TODO Ideally, there is a script that reads the version dynamically; this
  #      variable should then be removed.

  # Setting number of processes for build jobs and DIND jobs
  CPUS_BUILD: 4
  CPUS_TEST: 4
  CPUS_DIND: 2

  # Build flags
  MAKE_FLAGS_BUILD: -j$CPUS_BUILD
  MAKE_FLAGS_TEST: -j$CPUS_TEST

  # Shortcuts
  # ... for directories
  MODEL_SRC: $CI_PROJECT_DIR/src/models
  MODEL_PYTESTS: $CI_PROJECT_DIR/python/model_tests

  # ... for certain commands
  RUN_IN_UTOPIA_ENV: $CI_PROJECT_DIR/build/run-in-utopia-env
  ENTER_UTOPIA_ENV: source $CI_PROJECT_DIR/build/activate


# Define the image to use as base for all stages
image: ${BASE_IMAGE}
# NOTE Some jobs overwrite this setting locally

stages:
  - setup     # only runs on master
  - build
  - test
  # - deploy  # (soon) only runs on master


# .. YAML Templates ...........................................................
# This makes includes below easier using the `<<: *anchor_name` syntax

# To install the python environment, the configuration needs access to
# external but private repositories; by adding a deploy key to selected jobs,
# the pull from these repositories becomes possible. The key is available under
# the SSH_PRIVATE_KEY variable.
.ssh-access: &ssh_access
  before_script:
    # For outside dependencies, use the "Utopia CI" deploy key
    # Instructions:
    #   https://docs.gitlab.com/ce/ci/ssh_keys/
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    #
    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    # We're using tr to fix line endings which makes ed25519 keys work
    # without extra base64 encoding.
    # https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    #
    # Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    #
    # Add the known hosts lists to ensure this ssh connection is the right one
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config' # FIXME turn this on again

.artifacts: &artifacts
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - $CI_PROJECT_DIR/build
      - $CI_PROJECT_DIR/python # to include configured Python scripts
    expire_in: 3 hours


# ++ Job definitions ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# -- Setup stage --------------------------------------------------------------
# This stage takes care to build the utopia base testing image

setup:utopia-base:
  stage: setup
  only:
    - master
    - web
  tags:
    - dind
  
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2

  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
    # NOTE Both variables here are secret and protected variables
  script:
    - docker build -f docker/utopia-base.dockerfile -t $BASE_IMAGE .
    - docker push $BASE_IMAGE


# -- Build stage --------------------------------------------------------------
# In this stage, the tests, models, and documentation is built
# The artifacts of the tests and models jobs are needed in the test stage

# Build the documentation; artifacts used for documentation deployment
build:docs:
  stage: build
  <<: [*ssh_access, *artifacts]

  script:
    - mkdir build && cd build
    - cmake ..
    - make doc

# Build the unit tests; artifacts used in test stage
build:unit_tests:
  stage: build
  <<: [*ssh_access, *artifacts]

  script:
    - mkdir build && cd build
    - cmake ..
    - make $MAKE_FLAGS_BUILD build_unit_tests

# Build the models and their tests; artifacts used in test stage
build:models:
  stage: build
  <<: [*ssh_access, *artifacts]

  script:
    - mkdir build && cd build
    - cmake ..
    - make $MAKE_FLAGS_BUILD build_model_tests
    - make $MAKE_FLAGS_BUILD all


# Build in debug mode, once with gcc and once with clang
build:debug: &build_debug
  stage: build
  <<: *ssh_access
  allow_failure: true

  script:
    - mkdir build && cd build
    - CMAKE_FLAGS="
        -DCMAKE_BUILD_TYPE=Debug
        -DCMAKE_CXX_FLAGS_DEBUG='$CMAKE_CXX_FLAGS_DEBUG -Werror -Wno-deprecated-declarations'"
      cmake ..
    # FIXME After Utopia::as_ is removed, allow the deprecation warning again
    - make $MAKE_FLAGS_BUILD build_unit_tests
    - make $MAKE_FLAGS_BUILD build_model_tests
    - make $MAKE_FLAGS_BUILD all

build:debug-clang:
  <<: *build_debug

  script:
    - mkdir build && cd build
    - CMAKE_FLAGS="
        -DCMAKE_BUILD_TYPE=Debug
        -DCMAKE_C_COMPILER=clang
        -DCMAKE_CXX_COMPILER=clang++
        -DCMAKE_CXX_FLAGS_DEBUG='$CMAKE_CXX_FLAGS_DEBUG -Werror -Wno-deprecated-declarations'"
      cmake ..
    # FIXME After Utopia::as_ is removed, allow the deprecation warning again
    - make $MAKE_FLAGS_BUILD build_unit_tests
    - make $MAKE_FLAGS_BUILD build_model_tests
    - make $MAKE_FLAGS_BUILD all

# -- Test stage ---------------------------------------------------------------
# Using the artifacts of the build stage, executes tests of core, data i/o,
# frontend, and models.
test:core: &test_core
  stage: test
  <<: *ssh_access
  dependencies:
    - build:unit_tests
  script:
    - cd build
    - make $MAKE_FLAGS_TEST test_core

test:dataio:
  <<: *test_core
  script:
    - cd build
    - make $MAKE_FLAGS_TEST test_dataio

test:utopya:
  stage: test
  <<: *ssh_access
  dependencies:
    - build:models
  script:
    - cd build
    - make test_utopya

test:models:
  stage: test
  <<: *ssh_access
  dependencies:
    - build:models
  script:
    # Test all models using the testing framework
    - cd build
    - make $MAKE_FLAGS_TEST test_models
    #
    # Also test each model via the CLI.
    # Need to enter the virtual env first
    - $ENTER_UTOPIA_ENV
    #
    # First, the test and benchmark models:
    - utopia run dummy --debug
    - utopia run CopyMe --debug
    - utopia run CopyMeBare --debug --no-plot
    - utopia run HdfBench --sweep --num-seeds 3 --debug
    #
    # Now the actual models:
    - utopia run Amee --sweep --no-plot --debug
    - utopia run ContDisease --debug
    - utopia run ForestFire --debug
    - utopia run Hierarnet --debug
    - utopia run PredatorPrey --debug
    - utopia run SandPile --debug
    - utopia run SavannaHeterogeneous --debug
    - utopia run SavannaHomogeneous --debug
    - utopia run SimpleEG --debug
    - utopia run Vegetation --debug
    # TODO Add a call for your model here, alphabetically sorted!
    #      Don't forget to add the --debug flag. If you'd rather not plot, add
    #      the --no-plot flag as well.

test:cli:
  stage: test
  <<: *ssh_access
  dependencies:
    - build:models
  artifacts:
    name: utopia_output
    paths:
      - $CI_PROJECT_DIR/utopia_output/
    expire_in: 1h
  script:
    # Now, enter the virtual environment and test the CLI
    - $ENTER_UTOPIA_ENV
    #
    # Test deployment of user configuration
    - utopia config --deploy
    # Adjust the user configuration to store to a local directory
    - "echo \"\npaths: {out_dir: ${CI_PROJECT_DIR}/utopia_output}\"
       > $HOME/.config/utopia/user_cfg.yml"
    # TODO Once available, use the utopia config CLI to set this value.
    #
    # Test the CLI with the dummy model and its default configuration
    - utopia run dummy
    # Test passing a custom run configuration and performing a sweep
    - utopia run dummy $MODEL_PYTESTS/dummy/sweep.yml --sweep --note sweep
    # Test setting the number of steps (negative should fail)
    - utopia run dummy --num-steps 1 --no-plot
    - if utopia run dummy --num-steps -1; then exit 1; else echo "all good"; fi
    # Test setting the number of seeds (<= 1 should fail)
    - utopia run dummy --num-seeds 2 --sweep --no-plot --note sweep_via_cli
    - if utopia run dummy --num-seeds 1; then exit 1; else echo "all good"; fi
    # Test debug mode and setting simulation errors level
    - utopia run dummy --note debug0 --num-steps 3 --debug
    - utopia run dummy --note debug1 --num-steps 3 --debug --sim-errors warn
    #
    # Test the plotting capabilities
    - utopia run dummy --note plt0 --no-plot
    - sleep 1.1 && utopia eval dummy  # should create the corresponding plots
    # Need to sleep here because the eval directory will already exist
    - utopia run dummy --note plt1
    - utopia run dummy --note plt2 --plot-only states
    - utopia run dummy --note plt3 --plots-cfg $MODEL_SRC/dummy/dummy_plots.yml
    #
    # Test the setting of parameters and config parameters from CLI
    - utopia run dummy --set-params num_steps=3 write_every=2
    - utopia run dummy --set-cfg parameter_space.seed=23


# -- Deploy Stage -------------------------------------------------------------
# TODO
