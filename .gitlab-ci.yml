# Continuous Integration of Utopia
#
# This CI does the following:
#   - Automatically deploy and update a DUNE-based docker image for testing
#   - Build Utopia using gcc and clang
#   - Test Utopia (using the results of the gcc build)
---
variables:
  # Setting number of processes
  CPUS_DIND: 2
  CPUS_BUILD: 4

  # Build flags
  CONFIG_FLAGS:
      -DDUNE_PYTHON_VIRTUALENV_SETUP=True
      -DDUNE_PYTHON_ALLOW_GET_PIP=True
  MAKE_FLAGS_BUILD: -j$CPUS_BUILD


  # Variables needed for docker image deployment
  # The DUNE version to use for cloning during building of docker image
  DUNE_VERSION: "2.6"

  # The different segments of the resulting test image tag
  BASE_IMAGE_NAME: ccees/dune4utopia
  IMAGE_VERSION: "2.1"
  TEST_IMAGE: "${BASE_IMAGE_NAME}:img-v${IMAGE_VERSION}"
  # NOTE Do not forget to increment the IMAGE_VERSION when changes to the
  #      docker file are introduced.


  # Shortcuts
  # ... for directories
  MODEL_SRC: $CI_PROJECT_DIR/dune/utopia/models
  MODEL_TESTS: $CI_PROJECT_DIR/python/model_tests

  # ... for certain commands
  DUNE_CONTROL_PATH: /opt/dune:$CI_PROJECT_DIR  # such that DUNE finds Utopia
  DUNECTRL: ./dune-common/bin/dunecontrol
  RUN_IN_DUNE_ENV: $CI_PROJECT_DIR/build-cmake/run-in-dune-env
  ENTER_DUNE_ENV: source $CI_PROJECT_DIR/build-cmake/activate


  # Load submodules and submodules of submodules by default
  GIT_SUBMODULE_STRATEGY: recursive


# Define the image to use as base for all stages
# NOTE that some jobs overwrite this setting locally
image: ${TEST_IMAGE}

# Define the four stages of this CI, of which 'setup' is ran only manually and
# 'prep' only runs in the master branch.
stages:
  - setup
  - prep
  - build
  - test

# Template definitions ........................................................

# To install the python environment, dunecontrol needs access to external but
# private repositories; by adding a deploy key to selected jobs, the pull
# from these repositories becomes possible
.ssh-access: &ssh_access
  before_script:
    ## Enter dune directory
    - cd /opt/dune
    ##
    ## For outside dependencies, use the "Utopia CI" deploy key
    ## Instructions:
    ##   https://docs.gitlab.com/ce/ci/ssh_keys/
    ## Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)
    ##
    ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    ## We're using tr to fix line endings which makes ed25519 keys work
    ## without extra base64 encoding.
    ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    ##
    ## Create the SSH directory and give it the right permissions
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    ##
    ## Add the known hosts lists to ensure this ssh connection is the right one
    - echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    # - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config' # FIXME turn this on again

# Setup stage -----------------------------------------------------------------

setup:dune4utopia: &setup
  stage: setup
  only:
    - web  # can only activate this via web interface: "run pipeline"
  tags:
    - dind
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PW
    # NOTE Both variables here are secret and protected variables
  script:
    - docker build -f docker/dune4utopia.dockerfile
      --build-arg PROCNUM=$CPUS_DIND
      -t $TEST_IMAGE .
    - docker push $TEST_IMAGE

setup:dune4utopia-clang:
  <<: *setup
  script:
    - docker build -f docker/dune4utopia.dockerfile
      --build-arg CC=clang
      --build-arg CXX=clang++
      --build-arg PROCNUM=$CPUS_DIND
      -t ${TEST_IMAGE}-clang .
    - docker push ${TEST_IMAGE}-clang


# Preparation of DUNE environment ---------------------------------------------

prep:update-dune: &update
  <<: *setup
  stage: prep
  only:
    - master
  script:
    - docker build -f docker/dune4utopia-update.dockerfile
      --build-arg BASE_IMAGE=$TEST_IMAGE
      --build-arg PROCNUM=$CPUS_DIND
      -t $TEST_IMAGE .
    - docker push $TEST_IMAGE

prep:update-dune-clang:
  <<: *update
  script:
    - docker build -f docker/dune4utopia-update.dockerfile
      --build-arg BASE_IMAGE=${TEST_IMAGE}-clang
      --build-arg CC=clang
      --build-arg CXX=clang++
      --build-arg PROCNUM=$CPUS_DIND
      -t ${TEST_IMAGE}-clang .
    - docker push ${TEST_IMAGE}-clang


# Build stage -----------------------------------------------------------------
# Build the tests and the models
# The artifacts of the tests and models jobs are needed in the test stage
build:tests:
  stage: build
  <<: *ssh_access
  artifacts: &shared_artifacts
    name: "$CI_JOB_NAME"
    paths:
      - $CI_PROJECT_DIR/build-cmake
    expire_in: 3 hours
  script:
    - CMAKE_FLAGS="$CONFIG_FLAGS" $DUNECTRL --module=utopia configure
    - $DUNECTRL --only=utopia make $MAKE_FLAGS_BUILD build_tests

build:models:
  stage: build
  <<: *ssh_access
  artifacts:
    <<: *shared_artifacts
  script:
    - CMAKE_FLAGS="$CONFIG_FLAGS" $DUNECTRL --module=utopia configure
    - $DUNECTRL --only=utopia make $MAKE_FLAGS_BUILD all

# Build the documentation
# Add to shared artifacts for inspection
build:docs:
  stage: build
  <<: *ssh_access
  artifacts:
    <<: *shared_artifacts
  script:
    - CMAKE_FLAGS="$CONFIG_FLAGS" $DUNECTRL --module=utopia configure
    - $DUNECTRL --only=utopia make doc

# Build in debug mode, once with gcc and once with clang
build:debug: &build_debug
  stage: build
  <<: *ssh_access
  allow_failure: true
  script:
    - CMAKE_FLAGS="
      -DCMAKE_BUILD_TYPE=Debug
      $CONFIG_FLAGS
      -DCMAKE_CXX_FLAGS_DEBUG='$CMAKE_CXX_FLAGS_DEBUG -Werror'"
      $DUNECTRL --only=utopia configure
    - $DUNECTRL --only=utopia make $MAKE_FLAGS_BUILD build_tests
    - $DUNECTRL --only=utopia make $MAKE_FLAGS_BUILD all

build:debug-clang:
  <<: *build_debug
  image: ${TEST_IMAGE}-clang
  script:
    - CMAKE_FLAGS="
      -DCMAKE_BUILD_TYPE=Debug
      $CONFIG_FLAGS
      -DCMAKE_C_COMPILER=clang
      -DCMAKE_CXX_COMPILER=clang++
      -DCMAKE_CXX_FLAGS_DEBUG='$CMAKE_CXX_FLAGS_DEBUG -Werror'"
      $DUNECTRL --only=utopia configure
    - $DUNECTRL --only=utopia make $MAKE_FLAGS_BUILD build_tests
    - $DUNECTRL --only=utopia make $MAKE_FLAGS_BUILD all

# Test stage ------------------------------------------------------------------
# Using the artifacts of the build stage, executes tests of core, data i/o,
# frontend, and models.
test:core: &test_core
  stage: test
  <<: *ssh_access
  dependencies:
    - build:tests
  script:
    - cd /opt/dune
    - $DUNECTRL --only=utopia make test_core

test:dataio:
  <<: *test_core
  script:
    - $DUNECTRL --only=utopia make test_dataio

test:utopya:
  stage: test
  <<: *ssh_access
  dependencies:
    - build:models
  script:
    - $DUNECTRL --only=utopia configure
    - $DUNECTRL --only=utopia make test_utopya

test:models:
  stage: test
  <<: *ssh_access
  dependencies:
    - build:models
  script:
    # Test all models using the testing framework
    - $DUNECTRL --only=utopia configure
    - $DUNECTRL --only=utopia make test_models
    #
    # Also test each model via the CLI.
    # Need to enter the virtual env first
    - $ENTER_DUNE_ENV
    #
    # First, the test and benchmark models:
    - utopia run dummy --debug
    - utopia run CopyMe --debug
    - utopia run CopyMeBare --debug --no-plot
    - utopia run HdfBench --sweep --num-seeds 3 --debug
    #
    # Now the actual models:
    - utopia run Amee --sweep --no-plot --debug
    - utopia run ContDisease --debug
    - utopia run ForestFire --debug
    - utopia run Hierarnet --debug
    - utopia run SavannaHeterogeneous --debug
    - utopia run SavannaHomogeneous --debug
    - utopia run SimpleEG --debug
    - utopia run PredatorPrey --debug
    - utopia run Vegetation --debug
    # TODO Add a call for your model here, alphabetically sorted!
    #      Don't forget to add the --debug flag. If you'd rather not plot, add
    #      the --no-plot flag as well.

test:cli:
  stage: test
  <<: *ssh_access
  dependencies:
    - build:models
  artifacts:
    name: utopia_output
    paths:
      - $CI_PROJECT_DIR/utopia_output/
    expire_in: 1h
  script:
    - $DUNECTRL --only=utopia configure
    # Now, enter the virtual environment and test the CLI
    - $ENTER_DUNE_ENV
    #
    # Test deployment of user configuration
    - utopia config --deploy
    # Adjust the user configuration to store to a local directory
    - "echo \"\npaths: {out_dir: ${CI_PROJECT_DIR}/utopia_output}\"
       > $HOME/.config/utopia/user_cfg.yml"
    # TODO Once available, use the utopia config CLI to set this value.
    #
    # Test the CLI with the dummy model and its default configuration
    - utopia run dummy
    # Test passing a custom run configuration and performing a sweep
    - utopia run dummy $MODEL_TESTS/dummy/sweep.yml --sweep --note sweep
    # Test setting the number of steps (negative should fail)
    - utopia run dummy --num-steps 1 --no-plot
    - if utopia run dummy --num-steps -1; then exit 1; else echo "all good"; fi
    # Test setting the number of seeds (<= 1 should fail)
    - utopia run dummy --num-seeds 2 --sweep --no-plot --note sweep_via_cli
    - if utopia run dummy --num-seeds 1; then exit 1; else echo "all good"; fi
    # Test debug mode and setting simulation errors level
    - utopia run dummy --note debug0 --num-steps 3 --debug
    - utopia run dummy --note debug1 --num-steps 3 --debug --sim-errors warn
    #
    # Test the plotting capabilities
    - utopia run dummy --note plt0 --no-plot
    - sleep 1.1 && utopia eval dummy  # should create the corresponding plots
    # FIXME Need to sleep because the eval directory will already exist
    - utopia run dummy --note plt1
    - utopia run dummy --note plt2 --plot-only states
    - utopia run dummy --note plt3 --plots-cfg $MODEL_SRC/dummy/dummy_plots.yml
    #
    # Test the setting of parameters and config parameters from CLI
    - utopia run dummy --set-params num_steps=3 write_every=2
    - utopia run dummy --set-cfg parameter_space.seed=23
