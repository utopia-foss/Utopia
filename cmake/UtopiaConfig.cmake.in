@PACKAGE_INIT@

# === Include the Utopia CMake macros ===

# The local path to this file
get_filename_component(current_dir ${CMAKE_CURRENT_LIST_FILE} PATH)

# Store the paths to the venv binaries
set_and_check(UTOPIA_ENV_EXECUTABLE @UTOPIA_ENV_EXECUTABLE@)
set_and_check(UTOPIA_ENV_PIP @UTOPIA_ENV_PIP@)
set_and_check(UTOPIA_ENV_DIR @UTOPIA_ENV_DIR@)
set_and_check(RUN_IN_UTOPIA_ENV @RUN_IN_UTOPIA_ENV@)

# Add the installed modules to the module path
set_and_check(cmake_modules_dir @PACKAGE_cmake_modules_dir@)
list(APPEND CMAKE_MODULE_PATH ${cmake_modules_dir})

# Include all modules (manually because UtopiaMacros also does other stuff ...)
include(UtopiaPython)
include(UtopiaFrontendModelRegistry)

include(UtopiaAddCoverageFlags)
include(UtopiaEnableParallel)
include(UtopiaAddUnitTest)
include(UtopiaAddModel)
include(UtopiaAddModelTest)
include(UtopiaCheckPath)


# === Find the dependencies ===

# Add function 'find_dependency' which simply calls 'find_package',
# but implicitly uses QUIET and REQUIRED.
include(CMakeFindDependencyMacro)

# --- BOOST ---
find_dependency(Boost 1.67
                COMPONENTS unit_test_framework graph regex)

# --- SPDLOG ---
find_dependency(spdlog 1.3)

# --- YAML-CPP ---
find_dependency(yaml-cpp 0.6.2)

set(THREADS_PREFER_PTHREAD_FLAG)
find_dependency(Threads)

# --- ParallelSTL (pnly if found previously) ---
if (@ParallelSTL_FOUND@)
    # NOTE: This will also check TBB
    find_dependency(ParallelSTL)

    # Check ParallelSTL include directories
    get_target_property(PSTL_INCLUDE_DIRS
        pstl::ParallelSTL INTERFACE_INCLUDE_DIRECTORIES)
    check_path(EXIST_VAR PSTL_INCLUDE_EXISTS
               DIRECTORIES ${PSTL_INCLUDE_DIRS})

    if (NOT PSTL_INCLUDE_EXISTS)
        message(FATAL_ERROR "ParallelSTL was detected but could NOT be "
                            "included! This can happen with Homebrew "
                            "installations. Please consult the Utopia "
                            "README.md")
    endif()

# TBB with internal PSTL (Only if found previously)
elseif (@INTERNAL_PSTL_WITH_TBB@)
    # Check headerfile (quietly)
    set(CMAKE_REQUIRED_QUIET TRUE)
    include(CheckIncludeFileCXX)
    check_include_file_cxx(execution INTERNAL_PSTL)
    if (NOT INTERNAL_PSTL)
        message(FATAL_ERROR "Could not detect <execution> header!")
    endif()
    unset(CMAKE_REQUIRED_QUIET)

    # Check TBB
    find_dependency(TBB 2018.5)
endif()


# === Include Dependencies with custom CMake setup ===
# --- ARMADILLO ---
# Queck if we find it in config mode
# NOTE: Use 'find_package' because this is not required to succeed!
find_package(Armadillo CONFIG QUIET)
# fall back to our module if no target is defined
if (NOT TARGET armadillo)
    find_dependency(Armadillo MODULE)
endif()

# --- HDF5 ---
find_dependency(HDF5 1.10
                COMPONENTS C HL)
include(RegisterHDF5)

# === Finalize ===
# Include our target file
# (Makes targets Utopia::<target> available)
include(${current_dir}/@targets_export_name@.cmake)

check_required_components(@PROJECT_NAME@)
