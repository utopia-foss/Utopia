/**

\defgroup Core Core
\{

\brief Interface definitions and utility functions for building models

Core contains the main structures for building and running models.
Most importantly, it defines the Model base interface every model needs to
implement in order to be used within Utopia.

\}

\defgroup Neighborhoods Neighborhoods of Entities
\{
\ingroup Core
\brief Querying neighborhoods of cells on a grid or custom neighbors of entities

## Overview

Neighborhood functions are typically "free" functions or static methods which
return a ::CellContainer.

## Neighborhoods of cells on grids

A grid defines a spacial neighborhood via intersections of grid cells.
For querying the neighborhood of a cell on a grid, it is therefore required
to pass the grid information via the GridManager. Depending on the type of the
underlying grid, the function will dispatch to the most efficient
implementation.

\code{.cc}
    auto neighborhood = Utopia::Neighborhoods::NextNeighbor(cell, manager);
\endcode

## Custom neighborhoods of entities

Any Entity (a Cell or an Agent) can store a set of "custom" neighbors.
This is useful for defining interaction parters of agents based on non-spatial
properties, or for storing the neighbors of cells located on an unstructured
grid or a graph. The implementation uses more storage space to avoid
inefficient queries. Notice that these structures only store pointers to
the exact same data type.

The number of custom neighborhoods stored in an Entity has to be given as
template parameter of said Entity. The query functions take the number of the
custom neighborhood (or, equivalently, an `enum`) as template parameter.
Accessing a custom neighborhood that has not been defined is hence avoided
at compile time.

\code{.cc}
    enum class NB { Friends, Foes };
    Utopia::Neighborhoods::Custom<NB::Friends>::add_neighbor(nb, entity);
    auto foes = Utopia::Neighborhoods::Custom<NB::Foes>::neighbors(entity);
\endcode
\}

\defgroup Logging Output Logging
\{
\ingroup Core
\brief Utility functions for all logging output based on the spdlog backend.

All output of the simulation backend is intended to be controlled via
loggers. Loggers are implemented using spdlog
(see https://github.com/gabime/spdlog).
Regular output via the standard pipes `std::cout` and `std::cerr`
is strongly discouraged.

Utopia generates three types of loggers: One logger for Data I/O functions,
one for Core (backend) functions, and one for each model instance.
The Utopia::Model base class holds a logger instance which should be used
for information on the current model. To write log messages from within
Data I/O or Core backend functions, the respective logger first has to be
retrieved. This is achieved by using `spdlog::get`
(https://github.com/gabime/spdlog/wiki/2.-Creating-loggers#accessing-loggers-using-spdlogget).
The names for the two loggers are exported within the Utopia namespace.
All log levels are handled through the input configuration files.

The Utopia::PseudoParent automatically creates the utility loggers. For
executables without Models (like tests), the loggers have to be created
explicitly by manually calling Utopia::setup_loggers.
\}

*/
