/**

\defgroup DataIO DataIO
\{
\brief Writing data files and reporting data to the Python frontend

\}


\defgroup ConfigUtilities Config Utilities
\{
\ingroup DataIO
\brief Allows reading configuration entries from YAML files

Utopia relies heavily on the use of YAML configuration files.
These files are available as so called "config nodes", ::Utopia::DataIO::Config objects, which are hierarchically nested maps, sequences, and scalars.

When retrieving values from these nodes, a type cast becomes necessary. While the library used for YAML reading provides such a function, we found it more convenient to define some thin wrappers around them, which supply more information when something goes wrong.

### The ::Utopia::get_ function

The ::Utopia::get_ function supplies a general way to access the content of a YAML node.

Example:
\code{.cc}
    using namespace Utopia;
    auto cfg = YAML::Load("{my_double: 3.14, my_int: 42, my_str: foo}");

    auto my_double = get_double("my_double", cfg);
    auto my_int = get_int("my_int", cfg);
    auto my_uint = get_<unsigned int>("my_int", cfg);
    auto my_str = get_str("my_str", cfg);
\endcode

One way of remembering the order of arguments is: ``get`` the ``double`` called ``my_double`` from the following ``cfg`` node.
Of course, YAML has no types associated with each entry; the ::Utopia::get_ function *tries* to do this conversion and, if it fails, throws an exception.

While ``cfg["key"]`` can be used to traverse the YAML tree, cases where the given key is not available lead to so-called Zombie nodes. The ::Utopia::get_ method is capable of raising the appropriate error message, a ::Utopia::KeyError, for such cases, because the key and the node from which to read the key are passed separately.


### Legacy function: ::Utopia::as_ (Deprecated!)

Unlike ::Utopia::get_, the ::Utopia::as_ method directly expects to receive a ::Utopia::Config node:

\code{.cc}
    using namespace Utopia;
    auto cfg = YAML::Load("{my_double: 3.14, my_int: 42, my_str: foo}");

    auto my_double = as_double(cfg["my_double"]);
    auto my_int = as_int(cfg["my_int"]);
    auto my_uint = as_<unsigned int>(cfg["my_int"]);
    auto my_str = as_str(cfg["my_str"]);
\endcode

This function is deprecated, as it does not allow to throw ::Utopia::KeyError, because the information on the name of the key is not available in the scope of the ::Utopia::as_.

\}

*/
